apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {

    compileSdkVersion versions.androidCompileSdk
    buildToolsVersion versions.androidBuildTools

    defaultConfig {
        applicationId "com.kondenko.pocketwaka"

        minSdkVersion versions.androidMinSdk
        targetSdkVersion versions.androidTargetSdk

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        config {
            def props = new Properties()
            props.load(new FileInputStream(rootProject.file("release.properties")))

            storeFile rootProject.file(props.keyStore)
            keyAlias props.keyAlias
            keyPassword props.keyPassword
            storePassword props.storePassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
            shrinkResources true
            minifyEnabled true
            def configFiles = fileTree(dir: "./proguard", include: ["*.pro"]).asList()
            configFiles.add(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles configFiles.toArray()
        }
        debug {
            shrinkResources false
            minifyEnabled false
        }
        mock {
            initWith debug
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    sourceSets {
        File debugKaptFiles = file("$buildDir/generated/source/kapt/debug")

        main {
            java.srcDirs += 'src/main/kotlin'
        }
        release {
            java.srcDirs += [file("$buildDir/generated/source/kapt/release")]
        }
        debug {
            java.srcDirs += 'src/debug/kotlin'
            java.srcDirs += debugKaptFiles
        }
        mock {
            java.srcDirs += 'src/debug/kotlin'
            java.srcDirs += 'src/mock/kotlin'
            java.srcDirs += debugKaptFiles
        }
        test {
            java.srcDirs += 'src/test/kotlin'
            java.srcDirs += 'src/testUtils/kotlin'
            java.srcDirs += debugKaptFiles
        }
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
            java.srcDirs += 'src/uiTestUtils/kotlin'
            java.srcDirs += debugKaptFiles
        }
    }

    androidExtensions {
        experimental = true
    }

}

afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.startsWith("test")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }
}

kapt {
    generateStubs = false
}

dependencies {

    implementation kotlinLib
    implementation support
    implementation constraintLayout
    implementation rx
    implementation retrofit
    implementation koin
    implementation smartTabLayout
    implementation timber
    implementation firebaseCore
    implementation crashlyticsGoogle

    debugImplementation stetho

    mockImplementation stetho

    testImplementation testDependencies
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: versions.mockito

    androidTestImplementation androidTestDependencies
    androidTestImplementation(androidTestSupportDependencies, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:${versions.kotlin}"
    }
}

apply plugin: 'com.google.gms.google-services'